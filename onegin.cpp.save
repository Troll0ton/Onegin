#include <stdio.h>
#include <stlib.h>
#include <string.h>
#include <assert.h>

//-----------------------------------------------------------------------------

int  compare_strings (const void *first_str, const void *second_str);
 
int  num_of_strings  (char *buf, int buf_size);
 
void split_strings   (char *buf, int buf_size, struct String* Text);
 
//-----------------------------------------------------------------------------
 
struct String
{
    char *str;
    
    int   str_len;
}
 
//-----------------------------------------------------------------------------
 
int main ()
{
    FILE   *file  = fopen ("hamlet.txt", "rb");
    assert (file != NULL);
    
    struct stat buffer;
    fstat (fileno (file), &buffer);
    
    int   buf_size = buffer.str_len;
    char *buf = (char*) calloc (buf_size, sizeof (char));
    
    fread (buf, sizeof (char), buf_size, file);
    
    int text_size = num_of_strings (buf, buf_size);
    struct String Text[text_size];
    
    split_strings (buf, buf_size, Text);
    
    printf ("%s %d\n", Text[0].str, Text[0].str_len);
}
 
//-----------------------------------------------------------------------------
 
int compare_strings (const void *first_str, const void *second_str)
{
    return strcmp ((const char*) first_str, (const char*) second_str);
}

//-----------------------------------------------------------------------------

int num_of_strings (char *buf, int buf_size)
{
    int string_counter = 0;
    
    for(int i = 0; i < buf_size; i++)
    {
        if(buf[i] == '\n')
        {
            string_counter++;
        }
    }
    
    return string_counter + 1;
}

//-----------------------------------------------------------------------------

void split_strings (char *buf, int buf_size, struct String* Text)
{
    int max_buf_size = 100;
    int str_size = 0;
    int Text_index = 0;
        
    char *current_string = (char*) calloc (max_buf_size, sizeof (char));
        
    for(int i = 0; i < buf_size; i++)
    {
        if(*(buf + i) != '\0')
        {
            current_string[str_size] = *(buf + i);
            str_size++;
            
            if(str_size == max_buf_size)
            {
                max_buf_size *= 2;
                current_string = (char*) realloc (current_string, sizeof (char) * max_buf_size);
            }
        }
        
        else
        {
            current_string[str_size] = '\0';
            str_size++;
            
            char *pointer_copy = current_string;
            Text[Text_index].str = pointer_copy;
            Text[Text_index].str_len = str_size - 1;
            
            free (current_string);
            max_buf_size = 100;
            char *current_string = (char*) calloc (max_buf_size, szieof (char));
        }
    }
}
